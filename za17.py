# mis0
# Цикл for:
# Используйте цикл for, когда заранее известно количество итераций или когда нужно перебрать элементы коллекции (списка, кортежа, строки и т.д.).
# Он предоставляет удобный итерационный синтаксис для работы с коллекциями и итерируемыми объектами.
# Хорошо подходит для перебора элементов и выполнения блока кода для каждого элемента.
# Примеры использования: перебор элементов списка, обработка строковых данных посимвольно, перебор чисел в заданном диапазоне и т.д.
numbers = [1, 2, 3, 4, 5]
sum = 0
for num in numbers:
    sum += num
print(sum)

# Цикл while:
# Используйте цикл while, когда количество итераций неизвестно и зависит от условия.
# Он выполняет блок кода до тех пор, пока условие истинно.
# Хорошо подходит для выполнения цикла на основе условий, которые могут изменяться в процессе выполнения программы.
# Примеры использования: чтение данных из файла, выполнение цикла до достижения определенного условия, обработка событий в программе и т.д.
count = 0
while count < 5:
    print(count)
    count += 1

# В языке программирования Python ключевое слово "def" используется для определения функций. Функция представляет собой блок кода, который выполняет определенную задачу и может быть вызван из других частей программы для выполнения этой задачи.
# Функции в Python полезны по нескольким причинам:
# Повторное использование кода: Определение функции позволяет написать код один раз и затем использовать его многократно в разных частях программы. Вместо повторного написания одного и того же кода в разных местах вы можете определить функцию и вызывать ее в нужных местах.
# Упрощение и структурирование кода: Функции помогают разделить программу на более мелкие, логические блоки. Это упрощает чтение и понимание кода, а также упорядочивает его структуру. Каждая функция может выполнять конкретную задачу, что облегчает отладку и модификацию программы.
# Абстракция: Функции могут представлять абстрактные операции или концепции, скрывая детали и реализацию от остальной части программы. Например, вы можете определить функцию, которая вычисляет сумму двух чисел, и затем вызывать эту функцию без необходимости знать, как именно она реализована.
# Модульность: Функции позволяют разбить программу на модули, что делает ее более организованной и поддерживаемой. Вы можете создать разные файлы с определениями функций и импортировать их в основную программу по мере необходимости.
# Повышение производительности: Использование функций может способствовать повышению производительности программы. Если вы заметите, что определенный блок кода выполняется многократно, вы можете вынести его в функцию и вызывать ее вместо повторного выполнения кода.
# Это лишь несколько причин, почему функции в Python полезны. Они позволяют создавать более структурированный, гибкий и повторно используемый код, делая процесс программирования более эффективным и продуктивным.

# В Python список (list) - это упорядоченная коллекция элементов, которая позволяет хранить различные типы данных. Список создается с использованием квадратных скобок [ ] и элементы разделяются запятыми.
print('Создание списка:')
my_list = []  # Создание пустого списка
numbers = [1, 2, 3, 4, 5]  # Создание списка с числами
fruits = ['apple', 'banana', 'orange']  # Создание списка со строками
mixed = [1, 'apple', True]  # Создание списка с разными типами данных

# Обращение к элементам списка:
print('Элементы списка нумеруются, начиная с 0. Вы можете обратиться к элементу списка, указав его индекс в квадратных скобках.')
fruits_2 = ['mango', 'klubnika', 'cherry', 'grusha', 'water melon']
print(fruits_2[0])  # Выводит: mango
print(fruits_2[1])  # Выводит: klubnika
print(fruits_2[-1])  # Выводит: water melon (отрицательный индекс обращается к элементам с конца списка)

print('копия списка')
fruits_3 = fruits_2[:]
print('fruits_2:',fruits_2)
print('fruits_3:',fruits_3)

# Изменение элементов списка:
print('Элементы списка можно изменять, присваивая им новые значения по индексу.')
print(fruits)
fruits[1] = 'vinograd'
print(fruits)

# Длина списка:
print('Длина списка (количество элементов) может быть получена с помощью функции len().')
print(len(fruits))  # Выводит: 3

# Добавление элементов в список:            Методы списков
print('Вы можете добавлять новые элементы в список с помощью метода append() в конец списка.')
fruits.append('mandarin')
print(fruits)

# Итерация по списку:
print('Цикл for может использоваться для итерации по элементам списка.')
for i in fruits:
    print(i)

print('extend(iterable): Расширяет список, добавляя элементы из другой итерируемой коллекции (списка, кортежа и т.д.) в конец списка.')
more_fruits = ['malina', 'mango']
fruits.extend(more_fruits)
print(fruits)

print('insert(index, element): Вставляет элемент на определенную позицию в списке.')
fruits.insert(1, 'sliva')
print(fruits)

print('remove(element): Удаляет первое вхождение указанного элемента из списка.')
fruits.remove('sliva')
print(fruits)

print('pop(index): Удаляет и возвращает элемент по указанному индексу. Если индекс не указан, то удаляется и возвращается последний элемент списка.')
fruits.pop(-1)
print(fruits)

print('index(element): Возвращает индекс первого вхождения указанного элемента в списке.')
index = fruits.index('malina')
print(index)

print('count(element): Возвращает количество вхождений указанного элемента в списке.')
fruits.insert(4, 'malina')
count = fruits.count('malina')
print('malina =', count, 'штук')
print(fruits)

print('sort(): Сортирует элементы списка в порядке возрастания (для чисел и строк) или по алфавиту (для строк).')
numbers_2 = [3,6,56,23,-324]
print(numbers_2)
numbers_2.sort()
print(numbers_2)
numbers_2.sort(reverse=True)
print(numbers_2)

print('создаем массив с задонным числом (до)')
n = int(input('enter num: '))
auto_list = [i for i in range(n)]
print(auto_list)

print('Массив в массиве')
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix[0])
print(matrix[2][2])

print('mis6 Создайте массив с 5 типами данных')
my_array = [1, "two", 3.0, True, [4, 5, 6]]
print(my_array)

print('mis7 Создание массив со всеми цветами что вы знаете, и посчитайте их количество с помощью len')
colors = ["красный", "оранжевый", "желтый", "зеленый", "голубой", "синий", "фиолетовый"]
print(colors)
print(len(colors))